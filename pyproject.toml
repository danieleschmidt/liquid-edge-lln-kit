[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "liquid-edge-lln"
version = "0.1.0"
description = "Tiny liquid neural networks toolkit for sensor-rich edge robots"
authors = [{name = "Daniel Schmidt", email = "daniel@example.com"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Embedded Systems",
]
keywords = ["liquid neural networks", "edge ai", "robotics", "jax", "embedded"]

dependencies = [
    "jax>=0.4.28",
    "jaxlib>=0.4.28", 
    "flax>=0.8.0",
    "optax>=0.2.0",
    "numpy>=1.24.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.12.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "coverage[toml]>=7.3.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]
deployment = [
    "tensorflow>=2.15.0",
    "onnx>=1.16.0",
    "torch>=2.3.0",
]
ros2 = [
    "opencv-python>=4.9.0",
]
monitoring = [
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-exporter-prometheus>=1.12.0",
    "prometheus-client>=0.18.0",
    "structlog>=23.2.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
]
all = [
    "liquid-edge-lln[dev,deployment,ros2,monitoring,docs]"
]

[project.urls]
Homepage = "https://github.com/liquid-edge/liquid-edge-lln-kit"
Documentation = "https://liquid-edge.readthedocs.io"
Repository = "https://github.com/liquid-edge/liquid-edge-lln-kit"
Issues = "https://github.com/liquid-edge/liquid-edge-lln-kit/issues"
Changelog = "https://github.com/liquid-edge/liquid-edge-lln-kit/blob/main/CHANGELOG.md"

[project.scripts]
liquid-lln = "liquid_edge.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.ruff]
target-version = "py310"
line-length = 88
select = ["E", "F", "W", "C90", "I", "N", "UP", "B", "A", "C4", "SIM", "ARG", "PTH"]
ignore = ["E501", "B008", "B905"]

[tool.ruff.per-file-ignores]
"tests/*" = ["ARG", "S101"]
"examples/*" = ["T201"]
"scripts/*" = ["T201", "S602", "S603"]

[tool.ruff.isort]
known-first-party = ["liquid_edge"]
force-single-line = true

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
strict_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true
no_implicit_reexport = true

[[tool.mypy.overrides]]
module = ["jax.*", "flax.*", "optax.*", "tensorflow.*", "torch.*", "onnx.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=liquid_edge",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=90",
    "--strict-markers",
    "--strict-config",
    "--durations=10",
    "--tb=short",
    "-ra",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "hardware: marks tests requiring physical hardware",
    "benchmark: marks performance benchmark tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]
filterwarnings = [
    "ignore::DeprecationWarning:jax.*",
    "ignore::FutureWarning:flax.*",
    "error::UserWarning",
]
junit_family = "xunit2"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "examples", "docs"]
skips = ["B101", "B601", "B602"]
confidence_level = "medium"
severity_level = "medium"

[tool.bandit.assert_used]
skips = ["*test*.py"]

[tool.bandit.hardcoded_password_string]
word_list = ["password", "passwd", "pwd", "secret", "token"]

[tool.bandit.shell_injection]
skips = ["scripts/*", "setup.py"]