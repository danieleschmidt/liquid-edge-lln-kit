
# Multi-stage production Dockerfile for Quantum-Liquid Neural Network
FROM python:3.11-slim as builder

# Build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Labels for container metadata
LABEL maintainer="quantum-liquid-team@company.com" \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0"

# Security: Create non-root user
RUN groupadd -r quantumliquid && useradd --no-log-init -r -g quantumliquid quantumliquid

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Production stage
FROM python:3.11-slim as production

# Security: Create non-root user
RUN groupadd -r quantumliquid && useradd --no-log-init -r -g quantumliquid quantumliquid

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Set working directory
WORKDIR /app

# Copy application code
COPY src/ ./src/
COPY pure_python_quantum_breakthrough.py .
COPY robust_quantum_liquid_production.py .
COPY fast_scaled_quantum_demo.py .
COPY healthcheck.py .

# Create directories for logs and data
RUN mkdir -p /app/logs /app/data && \
    chown -R quantumliquid:quantumliquid /app

# Security: Switch to non-root user
USER quantumliquid

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python healthcheck.py

# Environment variables
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    LOG_LEVEL=INFO \
    QUANTUM_COHERENCE_THRESHOLD=0.6 \
    LIQUID_SPARSITY=0.4 \
    ENERGY_BUDGET_UW=50.0

# Start application
CMD ["python", "-m", "src.liquid_edge.cli", "--host", "0.0.0.0", "--port", "8080"]
